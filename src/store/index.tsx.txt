import React from 'react';
import { configureStore } from '@reduxjs/toolkit';
import { Provider } from 'react-redux';
import { Action, createStore, Reducer, Store } from "redux";
// import customizationSlice from './features/customizationCreateSlice';
// import articlesSlice from '@/store/features/slices/articles/articlesSlice';
// import blogSlice, { blogSlice1, reducer } from '@/store/features/slices/blog/blogSlice';
// import { topicsSlice } from '@/store/features/slices/topics/topicsSlice';

// import categoryReducer from './features/slices/index';

/**
 * https://codesandbox.io/p/sandbox/redux-toolkit-createasyncthunk-wrapper-useselector-memoized-1brm3?file=%2Fsrc%2Fpages%2Fabout%2FAbout.jsx%3A6%2C3-6%2C12
 * https://www.youtube.com/watch?v=qA6oyQQTJ3I&ab_channel=SanjeevThiyagarajan
 */

// const loggerMiddleware = (store) => {
//     return (next) => {
//         return (action) => {
//             if (ENV.NODE_ENV_ == 'development') console.log('loggerMiddleware:', action);
//             return next(action);
//         };
//     };
// };

// const fetchApiMiddlewareLogger = (store) => {
//     return (next) => {
//         return (action) => {
//             if (ENV.NODE_ENV_ == 'development') console.log('fetchApiMiddlewareLogger:', store.getState());
//             return next(action);
//         };
//     };
// };

// const store = configureStore({
//     middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat([loggerMiddleware, fetchApiMiddlewareLogger]),
//     reducer: {
//         articles: articlesSlice.reducer,
//         blog: blogSlice.reducer,
//         customization: customizationSlice,
//         topics: topicsSlice.reducer,
//         categoryReducer
//     }
// });


interface ComponentCardProps {
  children: React.ReactNode;
}
interface IState {
    turns: string[];
}

type TAction1 = "ACTION_1";

interface IAction1 extends Action<TAction1> {
    payload: string;
}

type TAppAction = IAction1; // Assume other action interfaes will be added via union.

// The reducer here doesn't do anything.
const reducer: Reducer<IState, TAppAction> = (state = { turns: [] }) => state;

const store: Store<IState, TAppAction> = createStore(reducer);
const ReduxStoreWrapper: React.FC<ComponentCardProps> = ({ children }) => {
    return <Provider store={store}>{children}</Provider>;
}
export default ReduxStoreWrapper;
